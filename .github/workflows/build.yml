name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  HELLO_REACT_APP_NODE_VERSION: '14.15.1'
  # Set the IMAGE_TAG in a way that works for both pull_request and push events.
  # For pull_request events, use github.event.pull_request.head.sha (see
  # https://github.com/actions/checkout#Checkout-pull-request-HEAD-commit-instead-of-merge-commit).
  # For push events, where github.event.pull_request.head.sha is not defined, use github.sha.
  IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}
  #SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #DOCKER_BUILDKIT: 1

jobs:
  anti_virus:
    runs-on: ubuntu-latest
    container:
      image: clamav/clamav:0.104.0
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - run: clamscan --version
      - run: mkdir -p /store && chown clamav /store
      - run: freshclam --config-file /etc/clamav/freshclam.conf --datadir=/store
      - run: clamscan --recursive --infected --detect-pua=yes --max-scansize=300M --max-filesize=100M --max-recursion=30 --max-files=50000 --tempdir=/tmp --database=/store .
      # - name: Announce failure
      #   if: ${{ failure() }}
      #   run: |
      #     ./scripts/github-action-announce-broken-branch

  pre_deps:
    runs-on: ubuntu-latest
    needs: [ anti_virus ]
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}

      # - name: Announce failure
      #   if: ${{ failure() }}
      #   run: |
      #     ./scripts/github-action-announce-broken-branch

  lint:
    needs: pre_deps
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
      - id: yarn-cache
        uses: actions/yarn-get-cache@v1
        with:
          node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"
      # - name: Configure yarn cache
      #   uses: actions/cache@v2.1.6
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: |
      #       ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #       ./node_modules
      #     key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       v1-yarn-
      # - name: Pre-commit checks
      #   uses: pre-commit/action@v2.0.3
      #   with:
      #     extra_args: --all-files

      # - name: Announce failure
      #   if: ${{ failure() }}
      #   run: |
      #     ./scripts/github-action-announce-broken-branch

  client_test:
    needs: pre_deps
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@v2.1.6
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - run: yarn test
      # - run: yarn test:coverage
      # - name: Announce failure
      #   if: ${{ failure() }}
      #   run: |
      #     ./scripts/github-action-announce-broken-branch

  e2e_tests:
    needs: [ pre_deps ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Build frontend code
        # env:
        #   REACT_APP_API_ADDRESS: http://easi:8080/api/v1
        #   REACT_APP_GRAPHQL_ADDRESS: http://easi:8080/api/graph/query
        #   REACT_APP_APP_ENV: test
        #   REACT_APP_OKTA_CLIENT_ID: 0oa2e913coDQeG19S297
        #   REACT_APP_OKTA_DOMAIN: https://test.idp.idm.cms.gov
        #   REACT_APP_OKTA_SERVER_ID: aus2e96etlbFPnBHt297
        #   REACT_APP_OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/aus2e96etlbFPnBHt297
        #   REACT_APP_OKTA_REDIRECT_URI: http://localhost:3000/implicit/callback
        #   REACT_APP_LOCAL_AUTH_ENABLED: true
        run: yarn run build
      # - name: Login to Docker Hub
      #   uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9 # v1.10.0
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f # v1.5.10
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-west-2
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2 # v1.3.3
      # - name: Run e2e cypress tests
      #   env:
      #     APP_ENV: test
      #     AWS_SES_SOURCE_ARN: ${{ secrets.AWS_SES_SOURCE_ARN }}
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     OKTA_TEST_PASSWORD: ${{ secrets.OKTA_TEST_PASSWORD }}
      #     OKTA_TEST_SECRET : ${{ secrets.OKTA_TEST_SECRET }}
      #     OKTA_TEST_USERNAME : ${{ secrets.OKTA_TEST_USERNAME }}
      #   run: |
      #     ./scripts/run-cypress-test-docker
      # - name: Upload cypress videos
      #   if: ${{ always() }}
      #   uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
      #   with:
      #     name: cypress-videos
      #     path: cypress/videos
      #     retention-days: 14
      # - name: Upload cypress screenshots
      #   if: ${{ always() }}
      #   uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
      #   with:
      #     name: cypress-screenshots
      #     path: cypress/screenshots
      #     if-no-files-found: ignore
      #     retention-days: 14
      # - name: Announce failure
      #   if: ${{ failure() }}
      #   run: |
      #     ./scripts/github-action-announce-broken-branch

  build-and-push-image:
    if: ${{ github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'deploy_dev') }}
    needs: [ lint, client_test, e2e_tests ]
    runs-on: ubuntu-latest
    environment: dev
    env:
      APP_ENV: dev
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      REGISTRY1_DOMAIN: registry1.dso.mil
      REGISTRY1_NAME: Charlie_Sakamaki
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
          registry-url: http://npm.pkg.github.com/
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@v2.1.6
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Build frontend code
        run: yarn run build
      - name: Log in to the Container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to the registry1 registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.REGISTRY1_DOMAIN }}
          username: ${{ env.REGISTRY1_NAME }}
          password: ${{ secrets.REGISTRY1_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2.5.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # - name: Publish image
      #   run: yarn publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  # deploy_dev:
  #   if: ${{ github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'deploy_dev') }}
  #   needs: [ lint, client_test, e2e_tests ]
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   env:
  #     APP_ENV: dev
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2.3.4
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #     - name: Set up node
  #       uses: actions/setup-node@v2.4.1
  #       with:
  #         node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - name: Configure yarn cache
  #       uses: actions/cache@v2.1.6
  #       id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
  #       with:
  #         path: |
  #           ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #           ./node_modules
  #         key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           v1-yarn-
      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f # v1.5.10
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-west-2
      #     role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
      #     role-duration-seconds: 1800
      #     role-skip-session-tagging: true
      # - name: Clean the database
      #   run: |
      #     ./scripts/db_lambda_invoke "easi-app-db-clean-tmp" "2" "easi-app-db-clean"
      # - name: Run migrations
      #   env:
      #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      #     ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      #     ECR_REPOSITORY: easi-db-migrate
      #   run: |
      #     ./scripts/deploy_service "easi-app-db-migrate" "dev-ecs-manager-docker" "7" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #     ./scripts/db_lambda_invoke "dev-ecs-manager-docker" "7" "easi-app-db-migrate"
      # - name: Deploy ECS service
      #   env:
      #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      #     ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      #     ECR_REPOSITORY: easi-backend
      #   run: |
      #     ./scripts/deploy_service "easi-app" "dev-ecs-manager-docker" "7" "easi-backend" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #     ./scripts/healthcheck "$IMAGE_TAG"
      # - name: Build static assets and release to S3
      #   env:
      #     LD_CLIENT_ID_DEV: ${{ secrets.LD_CLIENT_ID_DEV }}
      #     OKTA_CLIENT_ID_DEV: ${{ secrets.OKTA_CLIENT_ID_DEV }}
      #     OKTA_SERVER_ID_DEV: ${{ secrets.OKTA_SERVER_ID_DEV }}
      #     STATIC_S3_BUCKET_DEV: ${{ secrets.STATIC_S3_BUCKET_DEV }}
      #   run: |
      #     ./scripts/release_static
      # - name: Announce failure
      #   if: ${{ failure() }}
      #   run: |
      #     ./scripts/github-action-announce-broken-branch

  # deploy_impl:
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   needs: deploy_dev
  #   runs-on: ubuntu-latest
  #   environment: impl
  #   env:
  #     APP_ENV: impl
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #     - name: Set up node
  #       uses: actions/setup-node@270253e841af726300e85d718a5f606959b2903c # v2.1.5
  #       with:
  #         node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - name: Configure yarn cache
  #       uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
  #       id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
  #       with:
  #         path: |
  #           ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #           ./node_modules
  #         key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           v1-yarn-
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f # v1.5.10
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-2
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_IMPL }}
  #         role-duration-seconds: 1800
  #         role-skip-session-tagging: true
  #     - name: Backup the database
  #       run: |
  #         ./scripts/rds-snapshot-app-db
  #     - name: Run migrations
  #       env:
  #         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #         ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #         ECR_REPOSITORY: easi-db-migrate
  #       run: |
  #         ./scripts/deploy_service "easi-app-db-migrate" "impl-ecs-manager-docker" "6" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  #         ./scripts/db_lambda_invoke "impl-ecs-manager-docker" "6" "easi-app-db-migrate"
  #     - name: Deploy ECS service
  #       env:
  #         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #         ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #         ECR_REPOSITORY: easi-backend
  #       run: |
  #         ./scripts/deploy_service "easi-app" "impl-ecs-manager-docker" "6" "easi-backend" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  #         ./scripts/healthcheck "$IMAGE_TAG"
  #     - name: Build static assets and release to S3
  #       env:
  #         LD_CLIENT_ID_IMPL: ${{ secrets.LD_CLIENT_ID_IMPL }}
  #         OKTA_CLIENT_ID_IMPL: ${{ secrets.OKTA_CLIENT_ID_IMPL }}
  #         OKTA_SERVER_ID_IMPL: ${{ secrets.OKTA_SERVER_ID_IMPL }}
  #         STATIC_S3_BUCKET_IMPL: ${{ secrets.STATIC_S3_BUCKET_IMPL }}
  #       run: |
  #         ./scripts/release_static
  #     - name: Announce failure
  #       if: ${{ failure() }}
  #       run: |
  #         ./scripts/github-action-announce-broken-branch

  # deploy_prod:
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   needs: deploy_impl
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   env:
  #     APP_ENV: prod
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #     - name: Set up node
  #       uses: actions/setup-node@270253e841af726300e85d718a5f606959b2903c # v2.1.5
  #       with:
  #         node-version: ${{ env.HELLO_REACT_APP_NODE_VERSION }}
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - name: Configure yarn cache
  #       uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
  #       id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
  #       with:
  #         path: |
  #           ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #           ./node_modules
  #         key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           v1-yarn-
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@0d9a5be0dceea74e09396820e1e522ba4a110d2f # v1.5.10
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-2
  #         role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
  #         role-duration-seconds: 1800
  #         role-skip-session-tagging: true
  #     - name: Backup the database
  #       run: |
  #         ./scripts/rds-snapshot-app-db
  #     - name: Run migrations
  #       env:
  #         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #         ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #         ECR_REPOSITORY: easi-db-migrate
  #       run: |
  #         ./scripts/deploy_service "easi-app-db-migrate" "prod-ecs-manager-docker" "5" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  #         ./scripts/db_lambda_invoke "prod-ecs-manager-docker" "5" "easi-app-db-migrate"
  #     - name: Deploy ECS service
  #       env:
  #         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #         ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #         ECR_REPOSITORY: easi-backend
  #       run: |
  #         ./scripts/deploy_service "easi-app" "prod-ecs-manager-docker" "5" "easi-backend" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  #         ./scripts/healthcheck "$IMAGE_TAG"
  #     - name: Build static assets and release to S3
  #       env:
  #         LD_CLIENT_ID_PROD: ${{ secrets.LD_CLIENT_ID_PROD }}
  #         OKTA_CLIENT_ID_PROD: ${{ secrets.OKTA_CLIENT_ID_PROD }}
  #         OKTA_SERVER_ID_PROD: ${{ secrets.OKTA_SERVER_ID_PROD }}
  #         STATIC_S3_BUCKET_PROD: ${{ secrets.STATIC_S3_BUCKET_PROD }}
  #       run: |
  #         ./scripts/release_static
  #     - name: Announce failure
  #       if: ${{ failure() }}
  #       run: |
  #         ./scripts/github-action-announce-broken-branch
